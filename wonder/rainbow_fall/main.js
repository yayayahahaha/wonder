// Generated by CoffeeScript 1.11.1
(function() {
  var Block, block_density, block_number, blocks, c, canvas, close, draw, force_power, h, init, max_size, min_size, mouse_position, rate, w;

  canvas = null;

  c = null;

  w = window.innerWidth;

  h = window.innerHeight;

  max_size = 15;

  min_size = 15;

  block_density = 30;

  block_number = null;

  rate = 0.5;

  close = 200;

  force_power = 5;

  blocks = null;

  mouse_position = [-close, -close];

  Block = (function() {
    function Block() {
      this.x = Math.random() * w;
      this.y = Math.random() * h;
      this.vx = 0;
      this.vy = Math.random() * 0.5;
      this.width = Math.random() * max_size;
      this.height = Math.random() * max_size;
      this.speed = (this.width * this.height) * rate;
      this.text = Math.random().toString(36).substr(2, 5)[0];
    }

    Block.prototype.update = function() {
      this.x += this.vx * this.speed;
      this.y += this.vy * this.speed;
      if (this.x > w || this.x < 0) {
        this.vx = -this.vx;
      }
      if (this.y > h) {
        this.y = -10;
        return this.x = Math.random() * w;
      }
    };

    return Block;

  })();

  init = function() {
    var i, j, ref, results;
    block_number = (w * h) / Math.pow(block_density, 2);
    c.fillStyle = 'snow';
    c.strokeStyle = '#ff0063';
    c.lineWidth = 10;
    c.font = "12px Comic Sans MS";
    blocks = [];
    results = [];
    for (i = j = 0, ref = block_number; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push(blocks.push(new Block));
    }
    return results;
  };

  draw = function() {
    var distance, j, len, o;
    c.clearRect(0, 0, w, h);
    for (j = 0, len = blocks.length; j < len; j++) {
      o = blocks[j];
      distance = Math.pow((Math.pow(o.x - mouse_position[0], 2)) + (Math.pow(o.y - mouse_position[1], 2)), 0.5);
      if (distance <= close) {
        if (o.x > mouse_position[0]) {
          o.x = o.x + force_power;
        } else {
          o.x = o.x - force_power;
        }
        if (o.y > mouse_position[1]) {
          o.y = o.y + force_power;
        } else {
          o.y = o.y - force_power;
        }
      }
      c.fillStyle = "hsl(" + o.x % 360 + ",50%,50%)";
      c.fillText(o.text, o.x, o.y);
      o.update();
    }
    return window.requestAnimFrame(draw);
  };

  window.onload = function() {
    canvas = document.getElementById('c');
    canvas.width = w;
    canvas.height = h;
    c = canvas.getContext('2d');
    init();
    draw();
    canvas.addEventListener('mousemove', function(e) {
      return mouse_position = [e.clientX, e.clientY];
    });
    return canvas.addEventListener('mouseout', function(e) {
      return mouse_position = [-close, -close];
    });
  };

  window.onresize = function() {
    w = this.innerWidth;
    h = this.innerHeight;
    canvas.width = w;
    canvas.height = h;
    return init();
  };

  window.requestAnimFrame = function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };

}).call(this);
